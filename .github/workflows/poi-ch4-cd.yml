# This is a basic workflow to help you get started with Actions

name: Build-Push POI API image; Deploy 2 staging
# Define env variables
env:
  poi_path: apis/poi/**
  registry: docker.pkg.github.com
  acr_registry: openhackvm13xxh0acr.azurecr.io 
  repository: ganrad/openhack-devops-team-20/api-poi
  docker_path: apis/poi/web
  staging_url: https://openhackvm13xxh0poi-staging.azurewebsites.net/
  prod_url: https://openhackvm13xxh0poi.azurewebsites.net/
  resource_group: openhackvm13xxh0rg
  webapp_name: openhackvm13xxh0poi
  build_name: POI 

# Controls when the action will run. Triggers the workflow on push request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    paths: 
      - apis/poi/**

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build the docker image and push it to ACR/GitHub packages/GHCR.io
  docker_build_and_push:
    # Execute this workflow only when code changes are pushed/merged to the master branch!
    if: github.ref == 'refs/heads/master'
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Login to GitHub docker registry (not GHCR.io !)
      # - name: Docker login
        # run: docker login $registry -u ${{ secrets.DOCKER_USER }} -p ${{ secrets.GITHUB_TOKEN }}

      # ACR Login
      - name: ACR login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.acr_registry }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Run docker build
      - name: Docker build
        run: docker build -t $registry/$repository:${{github.run_number}} --build-arg build_version=${{github.run_number}} $docker_path
      
      # Run docker push
      - name: Docker push
        run: docker push $registry/$repository:${{github.run_number}}
      
      # List the images in the repo
      - name: Docker image list
        run: docker image ls $registry/$repository
      
      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
              body: body
            });
            
  # Deploy the poi-api application to staging slot    
  deploy_staging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: docker_build_and_push
    steps:
    - name: Azure authentication
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS  }}

    - name: Azure WebApp
      uses: Azure/webapps-deploy@v2
      with:
        app-name: ${{ env.webapp_name }}
        slot-name: staging
        images: ${{ env.registry }}/${{ env.repository }}:${{github.run_number}}

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
    
  # Validate the app deployment in staging slot      
  validate_staging:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: deploy_staging
    steps:      
    - name: Web Validate 
      run: |
        while [ true ]; do
           result=`curl -s -o /dev/null -w "%{http_code}" $staging_url`
           if [ -z $result ]; then
              echo "Status from healthcheck endpoint is empty!"
              exit(1)
              # break
           fi
           echo "Status from healthcheck endpoint : $result"
           if [ $result == "200" ]; then
              echo "Web service in staging seems to be running OK!"
              break
           else
              echo "Web service is not ready, sleeping 5 seconds ..."
              sleep 5
           fi
        done 

    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
